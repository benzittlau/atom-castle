(function() {
  var $, CompositeDisposable, Emitter, Task, TermView, Terminal, View, debounce, fs, last, os, path, renderTemplate, util, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require('util');

  os = require('os');

  fs = require('fs-plus');

  path = require('path');

  debounce = require('debounce');

  Terminal = require('atom-term.js');

  CompositeDisposable = require('atom').CompositeDisposable;

  window.isMac = window.navigator.userAgent.indexOf('Mac') !== -1;

  Task = require('atom').Task;

  Emitter = require('event-kit').Emitter;

  _ref = require('atom-space-pen-views'), $ = _ref.$, View = _ref.View;

  last = function(str) {
    return str[str.length - 1];
  };

  renderTemplate = function(template, data) {
    var vars;
    vars = Object.keys(data);
    return vars.reduce(function(_template, key) {
      return _template.split(RegExp("\\{\\{\\s*" + key + "\\s*\\}\\}")).join(data[key]);
    }, template.toString());
  };

  TermView = (function(_super) {
    __extends(TermView, _super);

    function TermView(opts) {
      this.opts = opts != null ? opts : {};
      this.emitter = new Emitter;
      this.fakeRow = $("<div><span>&nbsp;</span></div>").css({
        visibility: 'hidden'
      });
      TermView.__super__.constructor.apply(this, arguments);
    }

    TermView.prototype.focusPane = function() {
      var index, items, pane;
      pane = atom.workspace.getActivePane();
      items = pane.getItems();
      index = items.indexOf(this);
      if (index === -1) {
        return;
      }
      pane.activateItemAtIndex(index);
      return focus();
    };

    TermView.prototype.getForked = function() {
      return this.opts.forkPTY;
    };

    TermView.content = function() {
      return this.div({
        "class": 'term3'
      });
    };

    TermView.prototype.onData = function(callback) {
      return this.emitter.on('data', callback);
    };

    TermView.prototype.onExit = function(callback) {
      return this.emitter.on('exit', callback);
    };

    TermView.prototype.onResize = function(callback) {
      return this.emitter.on('resize', callback);
    };

    TermView.prototype.onSTDIN = function(callback) {
      return this.emitter.on('stdin', callback);
    };

    TermView.prototype.onSTDOUT = function(callback) {
      return this.emitter.on('stdout', callback);
    };

    TermView.prototype.input = function(data) {
      var base64ed, error;
      if (!this.term) {
        return;
      }
      try {
        if (this.ptyProcess) {
          base64ed = new Buffer(data).toString("base64");
          this.ptyProcess.send({
            event: 'input',
            text: base64ed
          });
        } else {
          this.term.write(data);
        }
      } catch (_error) {
        error = _error;
        console.error(error);
      }
      this.resizeToPane_();
      return this.focusTerm();
    };

    TermView.prototype.attached = function() {
      var args, colors, cols, cursorBlink, cwd, processPath, rows, runCommand, scrollback, shell, shellArguments, shellOverride, term, _ref1, _ref2, _ref3;
      this.disposable = new CompositeDisposable();
      _ref1 = this.opts, cols = _ref1.cols, rows = _ref1.rows, cwd = _ref1.cwd, shell = _ref1.shell, shellArguments = _ref1.shellArguments, shellOverride = _ref1.shellOverride, runCommand = _ref1.runCommand, colors = _ref1.colors, cursorBlink = _ref1.cursorBlink, scrollback = _ref1.scrollback;
      args = shellArguments.split(/\s+/g).filter(function(arg) {
        return arg;
      });
      if (this.opts.forkPTY) {
        _ref2 = this.getDimensions_(), cols = _ref2.cols, rows = _ref2.rows;
      }
      this.term = term = new Terminal({
        useStyle: false,
        screenKeys: false,
        handler: (function(_this) {
          return function(data) {
            return _this.emitter.emit('stdin', data);
          };
        })(this),
        colors: colors,
        cursorBlink: cursorBlink,
        scrollback: scrollback,
        cols: cols,
        rows: rows
      });
      term.on("data", (function(_this) {
        return function(data) {
          if (_this.ptyProcess) {
            return _this.input(data);
          }
        };
      })(this));
      term.on("title", (function(_this) {
        return function(title) {
          var newTitle, split;
          if (title.length > 20) {
            split = title.split(path.sep);
            newTitle = "";
            if (split[0] === "") {
              split.shift(1);
            }
            if (split.length === 1) {
              title = title.slice(0, 10) + "..." + title.slice(-10);
            } else {
              title = path.sep + [split[0], "...", split[split.length - 1]].join(path.sep);
              if (title.length > 25) {
                title = path.sep + [split[0], split[split.length - 1]].join(path.sep);
                title = title.slice(0, 10) + "..." + title.slice(-10);
              }
            }
          }
          _this.title_ = title;
          return _this.emitter.emit('did-change-title', title);
        };
      })(this));
      term.open(this.get(0));
      if (!this.opts.forkPTY) {
        term.end = (function(_this) {
          return function() {
            return _this.exit();
          };
        })(this);
      } else {
        processPath = require.resolve('./pty');
        this.ptyProcess = Task.once(processPath, fs.absolute((_ref3 = atom.project.getPaths()[0]) != null ? _ref3 : '~'), shellOverride, cols, rows, args);
        this.ptyProcess.on('term3:data', (function(_this) {
          return function(data) {
            var utf8;
            if (!_this.term) {
              return;
            }
            utf8 = new Buffer(data, "base64").toString("utf-8");
            _this.term.write(utf8);
            return _this.emitter.emit('stdout', utf8);
          };
        })(this));
        this.ptyProcess.on('term3:exit', (function(_this) {
          return function() {
            return _this.exit();
          };
        })(this));
      }
      if (runCommand) {
        this.input("" + runCommand + os.EOL);
      }
      term.focus();
      this.applyStyle();
      this.attachEvents();
      return this.resizeToPane_();
    };

    TermView.prototype.resize = function(cols, rows) {
      var error;
      if (!this.term) {
        return;
      }
      if (this.term.rows === rows && this.term.cols === cols) {
        return;
      }
      if (!(cols > 0 && rows > 0 && isFinite(cols) && isFinite(rows))) {
        return;
      }
      try {
        if (this.ptyProcess) {
          this.ptyProcess.send({
            event: 'resize',
            rows: rows,
            cols: cols
          });
        }
        if (this.term) {
          this.term.resize(cols, rows);
        }
      } catch (_error) {
        error = _error;
        console.error(error);
        return;
      }
      return this.emitter.emit('resize', {
        cols: cols,
        rows: rows
      });
    };

    TermView.prototype.titleVars = function() {
      return {
        bashName: last(this.opts.shell.split('/')),
        hostName: os.hostname(),
        platform: process.platform,
        home: process.env.HOME
      };
    };

    TermView.prototype.getTitle = function() {
      var titleTemplate;
      if (this.title_) {
        return this.title_;
      }
      this.vars = this.titleVars();
      titleTemplate = this.opts.titleTemplate || "({{ bashName }})";
      return renderTemplate(titleTemplate, this.vars);
    };

    TermView.prototype.onDidChangeTitle = function(callback) {
      return this.emitter.on('did-change-title', callback);
    };

    TermView.prototype.getIconName = function() {
      return "terminal";
    };

    TermView.prototype.applyStyle = function() {
      this.term.element.style.fontFamily = this.opts.fontFamily || atom.config.get('editor.fontFamily') || "monospace";
      return this.term.element.style.fontSize = (this.opts.fontSize || atom.config.get('editor.fontSize')) + "px";
    };

    TermView.prototype.attachEvents = function() {
      this.resizeToPane_ = this.resizeToPane_.bind(this);
      this.on('focus', this.focus);
      $(window).on('resize', (function(_this) {
        return function() {
          return _this.resizeToPane_();
        };
      })(this));
      this.disposable.add(atom.workspace.getActivePane().observeFlexScale((function(_this) {
        return function() {
          return setTimeout((function() {
            return _this.resizeToPane_();
          }), 300);
        };
      })(this)));
      this.disposable.add(atom.commands.add("atom-workspace", "term3:paste", (function(_this) {
        return function() {
          return _this.paste();
        };
      })(this)));
      return this.disposable.add(atom.commands.add("atom-workspace", "term3:copy", (function(_this) {
        return function() {
          return _this.copy();
        };
      })(this)));
    };

    TermView.prototype.copy = function() {
      var lines, rawLines, rawText, text, textarea;
      if (!this.term) {
        return;
      }
      if (this.term._selected) {
        textarea = this.term.getCopyTextarea();
        text = this.term.grabText(this.term._selected.x1, this.term._selected.x2, this.term._selected.y1, this.term._selected.y2);
      } else {
        rawText = this.term.context.getSelection().toString();
        rawLines = rawText.split(/\r?\n/g);
        lines = rawLines.map(function(line) {
          return line.replace(/\s/g, " ").trimRight();
        });
        text = lines.join("\n");
      }
      return atom.clipboard.write(text);
    };

    TermView.prototype.paste = function() {
      return this.input(atom.clipboard.read());
    };

    TermView.prototype.focus = function() {
      this.resizeToPane_();
      return this.focusTerm();
    };

    TermView.prototype.focusTerm = function() {
      if (!this.term) {
        return;
      }
      return this.term.focus();
    };

    TermView.prototype.resizeToPane_ = function() {
      var cols, rows, _ref1;
      if (!this.ptyProcess) {
        return;
      }
      _ref1 = this.getDimensions_(), cols = _ref1.cols, rows = _ref1.rows;
      return this.resize(cols, rows);
    };

    TermView.prototype.getDimensions = function() {
      var cols, rows;
      cols = this.term.cols;
      rows = this.term.rows;
      return {
        cols: cols,
        rows: rows
      };
    };

    TermView.prototype.getDimensions_ = function() {
      var cols, fakeCol, rows;
      if (!this.term) {
        cols = Math.floor(this.width() / 7);
        rows = Math.floor(this.height() / 15);
        return {
          cols: cols,
          rows: rows
        };
      }
      this.find('.terminal').append(this.fakeRow);
      fakeCol = this.fakeRow.children().first();
      cols = Math.floor((this.width() / fakeCol.width()) || 9);
      rows = Math.floor((this.height() / fakeCol.height()) || 16);
      this.fakeRow.remove();
      return {
        cols: cols,
        rows: rows
      };
    };

    TermView.prototype.exit = function() {
      var pane;
      pane = atom.workspace.getActivePane();
      return pane.destroyItem(this);
    };

    TermView.prototype.destroy = function() {
      if (this.ptyProcess) {
        this.ptyProcess.terminate();
        this.ptyProcess = null;
      }
      if (this.term) {
        this.emitter.emit('exit');
        this.term.destroy();
        this.term = null;
        this.off('focus', this.focus);
        $(window).off('resize', this.resizeToPane_);
      }
      if (this.disposable) {
        this.disposable.dispose();
        return this.disposable = null;
      }
    };

    return TermView;

  })(View);

  module.exports = TermView;

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/bzittlau/.atom/packages/term3/lib/term-view.coffee
